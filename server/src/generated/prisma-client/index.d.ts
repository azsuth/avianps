// Code generated by Prisma (prisma@1.22.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  bird: (where?: BirdWhereInput) => Promise<boolean>;
  score: (where?: ScoreWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  bird: (where: BirdWhereUniqueInput) => BirdPromise;
  birds: (
    args?: {
      where?: BirdWhereInput;
      orderBy?: BirdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Bird>;
  birdsConnection: (
    args?: {
      where?: BirdWhereInput;
      orderBy?: BirdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BirdConnectionPromise;
  score: (where: ScoreWhereUniqueInput) => ScorePromise;
  scores: (
    args?: {
      where?: ScoreWhereInput;
      orderBy?: ScoreOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Score>;
  scoresConnection: (
    args?: {
      where?: ScoreWhereInput;
      orderBy?: ScoreOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ScoreConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBird: (data: BirdCreateInput) => BirdPromise;
  updateBird: (
    args: { data: BirdUpdateInput; where: BirdWhereUniqueInput }
  ) => BirdPromise;
  updateManyBirds: (
    args: { data: BirdUpdateManyMutationInput; where?: BirdWhereInput }
  ) => BatchPayloadPromise;
  upsertBird: (
    args: {
      where: BirdWhereUniqueInput;
      create: BirdCreateInput;
      update: BirdUpdateInput;
    }
  ) => BirdPromise;
  deleteBird: (where: BirdWhereUniqueInput) => BirdPromise;
  deleteManyBirds: (where?: BirdWhereInput) => BatchPayloadPromise;
  createScore: (data: ScoreCreateInput) => ScorePromise;
  updateScore: (
    args: { data: ScoreUpdateInput; where: ScoreWhereUniqueInput }
  ) => ScorePromise;
  updateManyScores: (
    args: { data: ScoreUpdateManyMutationInput; where?: ScoreWhereInput }
  ) => BatchPayloadPromise;
  upsertScore: (
    args: {
      where: ScoreWhereUniqueInput;
      create: ScoreCreateInput;
      update: ScoreUpdateInput;
    }
  ) => ScorePromise;
  deleteScore: (where: ScoreWhereUniqueInput) => ScorePromise;
  deleteManyScores: (where?: ScoreWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  bird: (
    where?: BirdSubscriptionWhereInput
  ) => BirdSubscriptionPayloadSubscription;
  score: (
    where?: ScoreSubscriptionWhereInput
  ) => ScoreSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ScoreOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BirdOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "scientificName_ASC"
  | "scientificName_DESC"
  | "description_ASC"
  | "description_DESC"
  | "conservationStatus_ASC"
  | "conservationStatus_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ScoreUpdateManyWithoutBirdInput {
  create?: ScoreCreateWithoutBirdInput[] | ScoreCreateWithoutBirdInput;
  delete?: ScoreWhereUniqueInput[] | ScoreWhereUniqueInput;
  connect?: ScoreWhereUniqueInput[] | ScoreWhereUniqueInput;
  disconnect?: ScoreWhereUniqueInput[] | ScoreWhereUniqueInput;
  update?:
    | ScoreUpdateWithWhereUniqueWithoutBirdInput[]
    | ScoreUpdateWithWhereUniqueWithoutBirdInput;
  upsert?:
    | ScoreUpsertWithWhereUniqueWithoutBirdInput[]
    | ScoreUpsertWithWhereUniqueWithoutBirdInput;
  deleteMany?: ScoreScalarWhereInput[] | ScoreScalarWhereInput;
  updateMany?:
    | ScoreUpdateManyWithWhereNestedInput[]
    | ScoreUpdateManyWithWhereNestedInput;
}

export type BirdWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ScoreCreateInput {
  rating: Int;
  comment?: String;
  bird: BirdCreateOneWithoutScoresInput;
}

export interface ScoreUpdateManyDataInput {
  rating?: Int;
  comment?: String;
}

export interface ScoreUpsertWithWhereUniqueWithoutBirdInput {
  where: ScoreWhereUniqueInput;
  update: ScoreUpdateWithoutBirdDataInput;
  create: ScoreCreateWithoutBirdInput;
}

export interface ScoreSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ScoreWhereInput;
  AND?: ScoreSubscriptionWhereInput[] | ScoreSubscriptionWhereInput;
  OR?: ScoreSubscriptionWhereInput[] | ScoreSubscriptionWhereInput;
  NOT?: ScoreSubscriptionWhereInput[] | ScoreSubscriptionWhereInput;
}

export interface BirdCreateInput {
  name: String;
  scientificName?: String;
  description?: String;
  conservationStatus?: String;
  imageUrl?: String;
  scores?: ScoreCreateManyWithoutBirdInput;
}

export interface ScoreUpdateManyMutationInput {
  rating?: Int;
  comment?: String;
}

export interface ScoreCreateManyWithoutBirdInput {
  create?: ScoreCreateWithoutBirdInput[] | ScoreCreateWithoutBirdInput;
  connect?: ScoreWhereUniqueInput[] | ScoreWhereUniqueInput;
}

export interface BirdUpdateWithoutScoresDataInput {
  name?: String;
  scientificName?: String;
  description?: String;
  conservationStatus?: String;
  imageUrl?: String;
}

export interface ScoreCreateWithoutBirdInput {
  rating: Int;
  comment?: String;
}

export interface ScoreUpdateInput {
  rating?: Int;
  comment?: String;
  bird?: BirdUpdateOneRequiredWithoutScoresInput;
}

export interface BirdUpdateInput {
  name?: String;
  scientificName?: String;
  description?: String;
  conservationStatus?: String;
  imageUrl?: String;
  scores?: ScoreUpdateManyWithoutBirdInput;
}

export interface BirdCreateWithoutScoresInput {
  name: String;
  scientificName?: String;
  description?: String;
  conservationStatus?: String;
  imageUrl?: String;
}

export interface BirdUpdateManyMutationInput {
  name?: String;
  scientificName?: String;
  description?: String;
  conservationStatus?: String;
  imageUrl?: String;
}

export interface ScoreWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  rating?: Int;
  rating_not?: Int;
  rating_in?: Int[] | Int;
  rating_not_in?: Int[] | Int;
  rating_lt?: Int;
  rating_lte?: Int;
  rating_gt?: Int;
  rating_gte?: Int;
  comment?: String;
  comment_not?: String;
  comment_in?: String[] | String;
  comment_not_in?: String[] | String;
  comment_lt?: String;
  comment_lte?: String;
  comment_gt?: String;
  comment_gte?: String;
  comment_contains?: String;
  comment_not_contains?: String;
  comment_starts_with?: String;
  comment_not_starts_with?: String;
  comment_ends_with?: String;
  comment_not_ends_with?: String;
  bird?: BirdWhereInput;
  AND?: ScoreWhereInput[] | ScoreWhereInput;
  OR?: ScoreWhereInput[] | ScoreWhereInput;
  NOT?: ScoreWhereInput[] | ScoreWhereInput;
}

export interface ScoreUpdateWithWhereUniqueWithoutBirdInput {
  where: ScoreWhereUniqueInput;
  data: ScoreUpdateWithoutBirdDataInput;
}

export interface BirdUpsertWithoutScoresInput {
  update: BirdUpdateWithoutScoresDataInput;
  create: BirdCreateWithoutScoresInput;
}

export interface ScoreUpdateManyWithWhereNestedInput {
  where: ScoreScalarWhereInput;
  data: ScoreUpdateManyDataInput;
}

export interface ScoreScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  rating?: Int;
  rating_not?: Int;
  rating_in?: Int[] | Int;
  rating_not_in?: Int[] | Int;
  rating_lt?: Int;
  rating_lte?: Int;
  rating_gt?: Int;
  rating_gte?: Int;
  comment?: String;
  comment_not?: String;
  comment_in?: String[] | String;
  comment_not_in?: String[] | String;
  comment_lt?: String;
  comment_lte?: String;
  comment_gt?: String;
  comment_gte?: String;
  comment_contains?: String;
  comment_not_contains?: String;
  comment_starts_with?: String;
  comment_not_starts_with?: String;
  comment_ends_with?: String;
  comment_not_ends_with?: String;
  AND?: ScoreScalarWhereInput[] | ScoreScalarWhereInput;
  OR?: ScoreScalarWhereInput[] | ScoreScalarWhereInput;
  NOT?: ScoreScalarWhereInput[] | ScoreScalarWhereInput;
}

export interface BirdWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  scientificName?: String;
  scientificName_not?: String;
  scientificName_in?: String[] | String;
  scientificName_not_in?: String[] | String;
  scientificName_lt?: String;
  scientificName_lte?: String;
  scientificName_gt?: String;
  scientificName_gte?: String;
  scientificName_contains?: String;
  scientificName_not_contains?: String;
  scientificName_starts_with?: String;
  scientificName_not_starts_with?: String;
  scientificName_ends_with?: String;
  scientificName_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  conservationStatus?: String;
  conservationStatus_not?: String;
  conservationStatus_in?: String[] | String;
  conservationStatus_not_in?: String[] | String;
  conservationStatus_lt?: String;
  conservationStatus_lte?: String;
  conservationStatus_gt?: String;
  conservationStatus_gte?: String;
  conservationStatus_contains?: String;
  conservationStatus_not_contains?: String;
  conservationStatus_starts_with?: String;
  conservationStatus_not_starts_with?: String;
  conservationStatus_ends_with?: String;
  conservationStatus_not_ends_with?: String;
  imageUrl?: String;
  imageUrl_not?: String;
  imageUrl_in?: String[] | String;
  imageUrl_not_in?: String[] | String;
  imageUrl_lt?: String;
  imageUrl_lte?: String;
  imageUrl_gt?: String;
  imageUrl_gte?: String;
  imageUrl_contains?: String;
  imageUrl_not_contains?: String;
  imageUrl_starts_with?: String;
  imageUrl_not_starts_with?: String;
  imageUrl_ends_with?: String;
  imageUrl_not_ends_with?: String;
  scores_every?: ScoreWhereInput;
  scores_some?: ScoreWhereInput;
  scores_none?: ScoreWhereInput;
  AND?: BirdWhereInput[] | BirdWhereInput;
  OR?: BirdWhereInput[] | BirdWhereInput;
  NOT?: BirdWhereInput[] | BirdWhereInput;
}

export interface ScoreUpdateWithoutBirdDataInput {
  rating?: Int;
  comment?: String;
}

export interface BirdUpdateOneRequiredWithoutScoresInput {
  create?: BirdCreateWithoutScoresInput;
  update?: BirdUpdateWithoutScoresDataInput;
  upsert?: BirdUpsertWithoutScoresInput;
  connect?: BirdWhereUniqueInput;
}

export interface BirdSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BirdWhereInput;
  AND?: BirdSubscriptionWhereInput[] | BirdSubscriptionWhereInput;
  OR?: BirdSubscriptionWhereInput[] | BirdSubscriptionWhereInput;
  NOT?: BirdSubscriptionWhereInput[] | BirdSubscriptionWhereInput;
}

export interface BirdCreateOneWithoutScoresInput {
  create?: BirdCreateWithoutScoresInput;
  connect?: BirdWhereUniqueInput;
}

export type ScoreWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface ScorePreviousValues {
  id: ID_Output;
  rating: Int;
  comment?: String;
}

export interface ScorePreviousValuesPromise
  extends Promise<ScorePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  rating: () => Promise<Int>;
  comment: () => Promise<String>;
}

export interface ScorePreviousValuesSubscription
  extends Promise<AsyncIterator<ScorePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rating: () => Promise<AsyncIterator<Int>>;
  comment: () => Promise<AsyncIterator<String>>;
}

export interface BirdEdge {
  cursor: String;
}

export interface BirdEdgePromise extends Promise<BirdEdge>, Fragmentable {
  node: <T = BirdPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BirdEdgeSubscription
  extends Promise<AsyncIterator<BirdEdge>>,
    Fragmentable {
  node: <T = BirdSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BirdSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface BirdSubscriptionPayloadPromise
  extends Promise<BirdSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BirdPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BirdPreviousValuesPromise>() => T;
}

export interface BirdSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BirdSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BirdSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BirdPreviousValuesSubscription>() => T;
}

export interface Score {
  id: ID_Output;
  rating: Int;
  comment?: String;
}

export interface ScorePromise extends Promise<Score>, Fragmentable {
  id: () => Promise<ID_Output>;
  rating: () => Promise<Int>;
  comment: () => Promise<String>;
  bird: <T = BirdPromise>() => T;
}

export interface ScoreSubscription
  extends Promise<AsyncIterator<Score>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rating: () => Promise<AsyncIterator<Int>>;
  comment: () => Promise<AsyncIterator<String>>;
  bird: <T = BirdSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateScore {
  count: Int;
}

export interface AggregateScorePromise
  extends Promise<AggregateScore>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateScoreSubscription
  extends Promise<AsyncIterator<AggregateScore>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Bird {
  id: ID_Output;
  name: String;
  scientificName?: String;
  description?: String;
  conservationStatus?: String;
  imageUrl?: String;
}

export interface BirdPromise extends Promise<Bird>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  scientificName: () => Promise<String>;
  description: () => Promise<String>;
  conservationStatus: () => Promise<String>;
  imageUrl: () => Promise<String>;
  scores: <T = FragmentableArray<Score>>(
    args?: {
      where?: ScoreWhereInput;
      orderBy?: ScoreOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface BirdSubscription
  extends Promise<AsyncIterator<Bird>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  scientificName: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  conservationStatus: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  scores: <T = Promise<AsyncIterator<ScoreSubscription>>>(
    args?: {
      where?: ScoreWhereInput;
      orderBy?: ScoreOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface BirdPreviousValues {
  id: ID_Output;
  name: String;
  scientificName?: String;
  description?: String;
  conservationStatus?: String;
  imageUrl?: String;
}

export interface BirdPreviousValuesPromise
  extends Promise<BirdPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  scientificName: () => Promise<String>;
  description: () => Promise<String>;
  conservationStatus: () => Promise<String>;
  imageUrl: () => Promise<String>;
}

export interface BirdPreviousValuesSubscription
  extends Promise<AsyncIterator<BirdPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  scientificName: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  conservationStatus: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
}

export interface BirdConnection {}

export interface BirdConnectionPromise
  extends Promise<BirdConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BirdEdge>>() => T;
  aggregate: <T = AggregateBirdPromise>() => T;
}

export interface BirdConnectionSubscription
  extends Promise<AsyncIterator<BirdConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BirdEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBirdSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ScoreEdge {
  cursor: String;
}

export interface ScoreEdgePromise extends Promise<ScoreEdge>, Fragmentable {
  node: <T = ScorePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ScoreEdgeSubscription
  extends Promise<AsyncIterator<ScoreEdge>>,
    Fragmentable {
  node: <T = ScoreSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ScoreSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ScoreSubscriptionPayloadPromise
  extends Promise<ScoreSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ScorePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ScorePreviousValuesPromise>() => T;
}

export interface ScoreSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ScoreSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ScoreSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ScorePreviousValuesSubscription>() => T;
}

export interface AggregateBird {
  count: Int;
}

export interface AggregateBirdPromise
  extends Promise<AggregateBird>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBirdSubscription
  extends Promise<AsyncIterator<AggregateBird>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ScoreConnection {}

export interface ScoreConnectionPromise
  extends Promise<ScoreConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ScoreEdge>>() => T;
  aggregate: <T = AggregateScorePromise>() => T;
}

export interface ScoreConnectionSubscription
  extends Promise<AsyncIterator<ScoreConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ScoreEdgeSubscription>>>() => T;
  aggregate: <T = AggregateScoreSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Bird",
    embedded: false
  },
  {
    name: "Score",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
